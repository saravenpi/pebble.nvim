*pebble.txt*   Obsidian-style markdown link navigation for Neovim

                    _______________
                   /               \
                  |    Pebble      |
                   \_______________/
                         |
                    Markdown Links

Author: Saravenpi
License: MIT
Version: 1.0.0

==============================================================================
CONTENTS                                                    *pebble-contents*

1. Introduction.........................|pebble-introduction|
2. Installation.........................|pebble-installation|
3. Usage................................|pebble-usage|
4. Commands.............................|pebble-commands|
5. Keymaps..............................|pebble-keymaps|
6. Configuration........................|pebble-configuration|
7. Features.............................|pebble-features|
9. FAQ..................................|pebble-faq|

==============================================================================
1. INTRODUCTION                                         *pebble-introduction*

Pebble is a Neovim plugin that provides Obsidian-style markdown link
navigation and management. It allows you to:

‚Ä¢ Navigate between markdown files using [[wiki-style]] links
‚Ä¢ Create new files from links automatically
‚Ä¢ View an interactive graph of connected files
‚Ä¢ Navigate with history (back/forward)
‚Ä¢ Create links from selected text
‚Ä¢ Manage markdown headings and YAML frontmatter
‚Ä¢ Cache file lookups for performance

==============================================================================
2. INSTALLATION                                         *pebble-installation*

Install using your preferred plugin manager:

Using lazy.nvim: >
    {
        dir = "path/to/pebble",
        config = function()
            require('pebble').setup({
                auto_setup_keymaps = true,
                global_keymaps = false
            })
        end
    }
<

Using Packer: >
    use {
        'path/to/pebble',
        config = function()
            require('pebble').setup()
        end
    }
<

==============================================================================
3. USAGE                                                       *pebble-usage*

Basic usage:

1. Open a markdown file
2. Create links using [[file-name]] syntax
3. Place cursor on a link and press <CR> to follow it
4. If the file doesn't exist, it will be created automatically
5. Use <Tab> and <S-Tab> to navigate between links
6. Use navigation history to go back and forward

==============================================================================
4. COMMANDS                                                 *pebble-commands*

*:PebbleFollow*        Follow the link under cursor
*:PebbleNext*          Move to next link in buffer
*:PebblePrev*          Move to previous link in buffer
*:PebbleBack*          Go back in navigation history
*:PebbleForward*       Go forward in navigation history
*:PebbleGraph*         Toggle interactive link graph view
*:PebbleVisualGraph*   Toggle enhanced visual graph view with ASCII art
*:PebbleHistory*       Show navigation history (debug)
*:PebbleStats*         Show cache performance statistics
*:PebbleCreateLinkAndNavigate* Create link, file and navigate (visual mode)
*:PebbleCreateLinkAndFile* Create link and file without navigation (visual mode)
*:PebbleToggleChecklist* Toggle markdown checklist/todo item
*:PebbleInitHeader*    Initialize YAML frontmatter header
*:PebbleIncreaseHeading* Increase markdown heading level
*:PebbleDecreaseHeading* Decrease markdown heading level

==============================================================================
5. KEYMAPS                                                   *pebble-keymaps*

Default keymaps (markdown files):

*<CR>*           Follow link under cursor
*<Tab>*          Next link in buffer
*<S-Tab>*        Previous link in buffer
*<Ctrl-t>*       Toggle markdown checklist
*<leader>mt*     Toggle markdown checklist
*<leader>mg*     Toggle graph view
*<leader>mv*     Toggle visual graph view
*<leader>mc*     Create link and navigate (visual mode)
*<leader>ml*     Create link without navigation (visual mode)
*<leader>mh*     Initialize YAML header
*+*              Increase heading level
*-*              Decrease heading level


Global keymaps (when global_keymaps = true):

*<leader>mg*     Toggle graph view
*<leader>mv*     Toggle visual graph view
*<leader>mp*     Go to previous in navigation history
*<leader>mn*     Go to next in navigation history

==============================================================================
6. CONFIGURATION                                       *pebble-configuration*

Setup options: >
    require('pebble').setup({
        -- Automatically set up keymaps for markdown files
        auto_setup_keymaps = true,

        -- Set up global keymaps (disabled by default)
        global_keymaps = false
    })
<

To disable automatic keymaps and set your own: >
    require('pebble').setup({
        auto_setup_keymaps = false
    })

    -- Then set your own keymaps
    vim.keymap.set('n', 'gf', require('pebble').follow_link)
<

==============================================================================
7. FEATURES                                                 *pebble-features*

Link Types Supported:
‚Ä¢ [[wiki-style]] links (Obsidian format)
‚Ä¢ [text](file.md) standard markdown links
‚Ä¢ [text](https://url.com) external URLs (opens in browser)

Performance Features:
‚Ä¢ Intelligent file caching with invalidation
‚Ä¢ Graph view caching with TTL
‚Ä¢ Limited file scanning to prevent slowdowns
‚Ä¢ Git-aware root directory detection

Navigation Features:
‚Ä¢ Forward/backward history navigation
‚Ä¢ Smart link jumping with Tab/Shift-Tab
‚Ä¢ Interactive graph view with keyboard navigation
‚Ä¢ Automatic file creation from links
‚Ä¢ Visual selection to link conversion

Graph View Features:
‚Ä¢ Clean, borderless design (standard graph)
‚Ä¢ Enhanced visual graph with ASCII art boxes and connections
‚Ä¢ Interactive navigation with j/k or arrows
‚Ä¢ Shows incoming/outgoing links
‚Ä¢ Highlights missing files
‚Ä¢ Performance statistics
‚Ä¢ Keyboard shortcuts: q/Esc to close, Enter to open

==============================================================================
8. BASES                                                          *pebble-bases*

Bases are Obsidian-compatible database views that allow you to create dynamic
tables from your markdown files based on their frontmatter properties.

Creating a Base File:
Create a file with a .base extension containing YAML configuration.

Basic Base Structure: >
    # Filter which files to include
    filters:
      and:
        - status != "done"
        - priority == "high"
    
    # Create computed properties
    formulas:
      days_left: 'due and tonumber(os.difftime(date(due), os.time()) / 86400)'
      status_icon: 'status == "todo" and "‚è≥" or "‚úÖ"'
    
    # Display names for columns
    display:
      name:
        displayName: "Task"
      formula.status_icon:
        displayName: "üìä"
    
    # Define table views
    views:
      - type: table
        name: "My Tasks"
        order:
          - priority
          - due
        limit: 50
<

Supported Filter Operations:
‚Ä¢ Property comparisons: status == "todo", priority != "low"
‚Ä¢ Logical operations: and, or, not
‚Ä¢ File operations: file.hasTag("work"), file.inFolder("projects")

Formula Functions:
‚Ä¢ date(str): Parse date string
‚Ä¢ now(): Current timestamp
‚Ä¢ if(condition, true_val, false_val): Conditional
‚Ä¢ concat(...): Concatenate strings
‚Ä¢ length(val): Get string/array length
‚Ä¢ Math operations: +, -, *, /
‚Ä¢ String methods: format, match, etc.

==============================================================================
9. FAQ                                                           *pebble-faq*

Q: How does file lookup work?
A: Pebble builds a cache of all .md files in your git repository (or current
   working directory). It uses filename-without-extension as the lookup key.

Q: What happens if I have duplicate filenames?
A: The first match found will be used. Consider using subdirectories or
   unique names to avoid conflicts.

Q: Can I customize the link format?
A: Currently only [[wiki]] and [text](link) formats are supported. More
   formats may be added in future versions.

Q: How do I clear the cache?
A: The cache automatically invalidates when files are created, modified, or
   deleted. You can also restart Neovim to clear all caches.

Q: Why is the graph view limited to 200 files?
A: This prevents performance issues in large repositories. The limit can be
   adjusted by modifying MAX_FILES_TO_SCAN in the source code.

Q: Are .base files compatible with Obsidian?
A: Yes! Pebble's .base files use the same YAML format as Obsidian 2025 Bases.
   You can create them in Obsidian and view them in Neovim, or vice versa.

Q: How do I refresh a base view?
A: Press 'r' while in a base view to refresh the cache and reload data.

Q: Can I have multiple views in one base file?
A: Yes! Add multiple entries to the 'views' array. Currently only table views
   are supported, but each can have different filters and sorting.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
